#LiCA_and_local_schedule_threaded.py
#sets flag variables and handles logic to determine if GPIO board pin
#11 should be set to High or Low.  Allows for prescheduled times to be on,
#but requires a start condition from LiCA to be active in order to actually activate.
#Also allows for an override condition to force the pin HIGH for a set period of time.

import threading
import time
from time import sleep
import socket  #import socket library
import RPi.GPIO as GPIO  #import GPIO library
import schedule  #uses schedule library

GPIO.setwarnings(False) 
GPIO.setmode(GPIO.BOARD) #uses physical pin count on board
GPIO.setup(11, GPIO.OUT, initial=GPIO.LOW) #sets pin 11 as output, inital state low

data = "no message received yet" #variable for incoming message
LiCA_FLAG = "no flag yet" #variable for LiCA state
Sched_FLAG = "no flag yet" #variable for scheduler state
override_FLAG = "no flag yet" #variable for an override

UDP_IP = "172.18.14.228" #ip address for this Pi.
UDP_PORT = 5005 #port this pi is listening to

sock = socket.socket(socket.AF_INET, # Internet
                     socket.SOCK_DGRAM) # UDP
sock.bind((UDP_IP, UDP_PORT))

def job(): #this function handles whether the schedule is in active state
    print("I'm working...")
    global Sched_FLAG
    Sched_FLAG = "ON"
    
def nojob(): #this function handles whether the schedule is non-active state
    print("I'm out!")
    global Sched_FLAG
    Sched_FLAG = "OFF"

def set_LiCA_Flag_ON(): #handles whether we have gotten the start command from LiCA
    global LiCA_FLAG
    LiCA_FLAG = "ON"
    
def set_LiCA_FLAG_OFF(): #handles whether we have gotten the stop command from LiCA
    global LiCA_FLAG
    LiCA_FLAG = "OFF"
    
def set_override_ON(): #handles override condition variable
    global override_FLAG
    override_FLAG = "ON"

def set_override_OFF(): #handles override off condition variable
    global override_FLAG
    override_FLAG = "OFF"
    
# Run job every minute at the specified second
schedule.every().minute.at(":01").do(job)
schedule.every().minute.at(":51").do(nojob)

#schedule.every().day.at("14:37").do(job)
#schedule.every().day.at("14:38").do(nojob)


# Run job every day at specific HH:MM and next HH:MM:SS
#schedule.every().day.at("10:30").do(job)

def print_data(): #UDP receiver and message interpreter. Runs constantly in its own thread.
    while True:
        data, addr = sock.recvfrom(1024) #buffer size is 1024 bytes
        print("received message: %s" % data) #prints whatever message is received.
        if data == b'override': #override command sent from LiCA
            data = "wipe after override" #wipes the data variable, so override times out
            set_override_ON() #run this function
        elif data == b'on':
            #LiCA just sends 'on', but it shows up as b'on'.
            #It's some kind of type issue.  I'm not a coder, you fix it.
            set_LiCA_Flag_ON() #run this function
        elif data == b'off': #off command from LiCA
            set_LiCA_FLAG_OFF() #run this function
            

def scheduling():
    while True: #scheduling constantly runs in its own thread
        schedule.run_pending()
        time.sleep(1)

def comparator(): #logic portion, constantly running in its own thread.
    while True:
        if override_FLAG == "ON": #we want it on NOW
            GPIO.output(11, GPIO.HIGH)
            sleep(30*60) #set number of seconds you want override to run for. Multiply by 60 to turn into minutes
            set_override_OFF()
        elif LiCA_FLAG == "ON" and Sched_FLAG == "ON": #we want it on, and the time is right
            GPIO.output(11, GPIO.HIGH) 
        elif LiCA_FLAG == "ON" and Sched_FLAG == "OFF": #we want it on, and the time is wrong
            GPIO.output(11, GPIO.LOW)
        elif LiCA_FLAG == "OFF": #we want it off
            GPIO.output(11, GPIO.LOW)
        else: #we dont know what we want, just turn it off
            GPIO.output(11, GPIO.LOW)


t1 = threading.Thread(target=print_data) #3 threads running simultaneously
t2 = threading.Thread(target=scheduling)
t3 = threading.Thread(target=comparator)
                  

t1.start() #starts each thread
t2.start()
t3.start()
